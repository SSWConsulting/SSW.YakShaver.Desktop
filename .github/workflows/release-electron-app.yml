name: Release Electron App

on:
  release:
    types: [published]

permissions:
  contents: write

env:
  APP_NAME: SSW.YakShaver
  NODE_VERSION: 20

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check.outputs.version }}
      target: ${{ steps.check.outputs.target }}
    steps:
      - id: check
        run: |
          TAG="${{ github.event.release.tag_name }}"
          TARGET="${{ github.event.release.target_commitish }}"

          echo "version=${TAG#v}" >> $GITHUB_OUTPUT
          echo "target=$TARGET" >> $GITHUB_OUTPUT

  build-windows:
    needs: check-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-release.outputs.target }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      # TODO: Remove this step once this PBI is done: https://github.com/SSWConsulting/SSW.YakShaver/issues/3095
      - name: Create .env from secrets
        shell: pwsh
        env:
          YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
          YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
        run: |
          "YOUTUBE_CLIENT_ID=$env:YOUTUBE_CLIENT_ID" | Out-File -FilePath ".env" -Encoding utf8 -NoNewline
          Add-Content -Path ".env" -Value "`nYOUTUBE_CLIENT_SECRET=$env:YOUTUBE_CLIENT_SECRET"

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Install UI dependencies
        run: npm ci --prefer-offline
        working-directory: src/ui

      - name: Build Windows app
        run: npm run make
        env:
          NODE_ENV: production
          CI: true

      - name: Prepare release assets
        shell: pwsh
        run: |
          $installer = Get-ChildItem "out/make/squirrel.windows/x64" -Filter "*.exe" -Recurse |
                       Where-Object { $_.Name -notlike "*-full.nupkg" } | Select-Object -First 1
          if (-not $installer) { throw "Windows installer not found" }

          New-Item -ItemType Directory -Force -Path "out/release-assets" | Out-Null
          Copy-Item $installer.FullName "out/release-assets/${{ env.APP_NAME }}-Windows-v${{ needs.check-release.outputs.version }}.exe"

          $releases = Get-ChildItem "out/make/squirrel.windows/x64" -Filter "RELEASES" -Recurse | Select-Object -First 1
          if ($releases) { Copy-Item $releases.FullName "out/release-assets/RELEASES" }

      - uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: out/release-assets/
          retention-days: 5

      - uses: softprops/action-gh-release@v2
        with:
          files: out/release-assets/*

  build-macos:
    needs: check-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-release.outputs.target }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      # TODO: Remove this step once this PBI is done: https://github.com/SSWConsulting/SSW.YakShaver/issues/3095
      - name: Create .env from secrets
        env:
          YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
          YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
        run: |
          printf "YOUTUBE_CLIENT_ID=%s\nYOUTUBE_CLIENT_SECRET=%s\n" "$YOUTUBE_CLIENT_ID" "$YOUTUBE_CLIENT_SECRET" > .env

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Install UI dependencies
        run: npm ci --prefer-offline
        working-directory: src/ui

      - name: Build macOS app
        run: npm run make
        env:
          NODE_ENV: production
          CI: true

      - name: Debug output structure
        run: |
          echo "=== Output directory structure ==="
          find out -type f -name "*.zip" || echo "No zip files found"
          echo "=== Full out/make structure ==="
          ls -R out/make || echo "out/make not found"

      - name: Prepare release assets
        run: |
          # Try to find the zip file in various possible locations
          PACKAGE=$(find out/make -name "*.zip" -type f | head -n 1)

          if [ -z "$PACKAGE" ]; then
            echo "ERROR: macOS package not found"
            echo "Searched in out/make for .zip files"
            find out -type f
            exit 1
          fi

          echo "Found package: $PACKAGE"
          mkdir -p out/release-assets
          cp "$PACKAGE" "out/release-assets/${{ env.APP_NAME }}-macOS-v${{ needs.check-release.outputs.version }}.zip"

          LATEST=$(find out/make -name "latest-mac.yml" -type f | head -n 1)
          [ -n "$LATEST" ] && cp "$LATEST" out/release-assets/latest-mac.yml

      - uses: actions/upload-artifact@v4
        with:
          name: macos-installers
          path: out/release-assets/
          retention-days: 5

      - uses: softprops/action-gh-release@v2
        with:
          files: out/release-assets/*
